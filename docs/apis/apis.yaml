openapi: 3.0.0
info:
  title: Twitter-like API
  version: "1.0.0"
  description: >
    Twitter ライクなアプリケーションの API 定義です。  
    ユーザー登録、認証、ツイート、タイムライン、フォロー、通知などの基本機能を含みます。
servers:
  - url: http://localhost:8080/api/v1
paths:
  /auth/register:
    post:
      summary: ユーザー登録
      description: 新規ユーザーの登録を行います。
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userName:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
              required:
                - userName
                - email
                - password
      responses:
        '201':
          description: ユーザーが正常に作成されました。
        '400':
          description: リクエストエラー
  
  /auth/login:
    post:
      summary: ログイン認証
      description: ユーザーの認証を行い、アクセストークンを返します。
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
              required:
                - email
                - password
      responses:
        '200':
          description: 認証に成功し、トークンを返します。
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '401':
          description: 認証失敗
  
  /users/me:
    get:
      summary: ユーザー情報取得
      description: 認証ユーザーのプロフィール情報を取得します。
      responses:
        '200':
          description: ユーザー情報の取得に成功しました。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      summary: ユーザー情報更新
      description: 認証ユーザーのプロフィール情報を更新します。
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                bio:
                  type: string
                avatarUrl:
                  type: string
              example:
                bio: "Hello, I'm using our Twitter-like app."
                avatarUrl: "http://example.com/avatar.jpg"
      responses:
        '200':
          description: プロフィールが正常に更新されました。
        '400':
          description: リクエストエラー

  /users/{userId}:
    get:
      summary: ユーザープロフィール取得
      description: 指定したユーザーIDのプロフィール情報を取得します。
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ユーザープロフィールの取得に成功しました。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicUser'

  /admin/users:
    get:
      summary: ユーザー一覧取得（管理者向け）
      description: ユーザーの一覧を取得します。
      responses:
        '200':
          description: ユーザー一覧の取得に成功しました。
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

  /tweets:
    post:
      summary: ツイート投稿
      description: 新規ツイートを投稿します。
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  description: ツイート本文
                imageUrl:
                  type: string
                  description: オプションの画像 URL
              required:
                - content
      responses:
        '201':
          description: ツイートが正常に投稿されました。
        '400':
          description: リクエストエラー
    get:
      summary: ツイート一覧取得
      description: ツイートの一覧を取得します（タイムライン、検索等に利用）。
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: ツイート一覧の取得に成功しました。
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tweet'
  /tweets/{tweetId}:
    get:
      summary: ツイート詳細取得
      description: 指定したツイートIDの詳細情報を取得します。
      parameters:
        - name: tweetId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ツイート詳細の取得に成功しました。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tweet'
    delete:
      summary: ツイート削除
      description: ツイートを削除します（投稿者または管理者のみ）。
      parameters:
        - name: tweetId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ツイートが正常に削除されました。
        '403':
          description: アクセスが拒否されました
  /tweets/{tweetId}/like:
    post:
      summary: ツイートにいいね
      description: 指定したツイートにいいねを付与します。
      parameters:
        - name: tweetId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: いいねが正常に処理されました。
  /tweets/{tweetId}/retweet:
    post:
      summary: リツイート
      description: 指定したツイートをリツイートします。
      parameters:
        - name: tweetId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: リツイートが正常に処理されました。
  /tweets/{tweetId}/reply:
    post:
      summary: ツイートへの返信
      description: 指定したツイートに対する返信を投稿します。
      parameters:
        - name: tweetId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
              required:
                - content
      responses:
        '201':
          description: 返信が正常に投稿されました。
  /timeline:
    get:
      summary: タイムライン取得
      description: 認証ユーザーのタイムライン（フォロー中のユーザーのツイート）を取得します。
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: タイムラインの取得に成功しました。
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tweet'
  /follow:
    post:
      summary: ユーザーのフォロー
      description: 指定したユーザーをフォローします。
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
              required:
                - userId
      responses:
        '200':
          description: フォロー処理が正常に完了しました。
  /users/{userId}/followers:
    get:
      summary: フォロワー一覧取得
      description: 指定したユーザーのフォロワー一覧を取得します。
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: フォロワー一覧の取得に成功しました。
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /users/{userId}/following:
    get:
      summary: フォロー中ユーザー一覧取得
      description: 指定したユーザーがフォロー中のユーザー一覧を取得します。
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: フォロー中ユーザー一覧の取得に成功しました。
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /notifications:
    get:
      summary: 通知一覧取得
      description: 認証ユーザーへの通知一覧を取得します。
      responses:
        '200':
          description: 通知一覧の取得に成功しました。
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
components:
  schemas:
    User:
      type: object
      properties:
        userId:
          type: string
        userName:
          type: string
        email:
          type: string
          format: email
        bio:
          type: string
        avatarUrl:
          type: string
    PublicUser:
      type: object
      properties:
        userId:
          type: string
        userName:
          type: string
        bio:
          type: string
        avatarUrl:
          type: string
    Tweet:
      type: object
      properties:
        tweetId:
          type: string
        content:
          type: string
        imageUrl:
          type: string
        createdAt:
          type: string
          format: date-time
        author:
          $ref: '#/components/schemas/PublicUser'
        likes:
          type: integer
        retweets:
          type: integer
        replies:
          type: integer
    Notification:
      type: object
      properties:
        notifyId:
          type: string
        type:
          type: string
          description: >
            通知の種類 (like, retweet, reply, follow など)
        message:
          type: string
        createdAt:
          type: string
          format: date-time
